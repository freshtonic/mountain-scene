// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('mountain-scene', []);

  angular.module('mountain-scene').run(function($rootScope, MountainScene) {
    $rootScope.scene = new MountainScene();
    $rootScope.activeTab = 'Mountains';
    return $(function() {
      document.body.appendChild($rootScope.scene.renderer.domElement);
      return $rootScope.scene.render();
    });
  });

  angular.module('mountain-scene').directive('tabs', function() {
    return {
      template: "<div>\n  \n</div>"
    };
  });

  angular.module('mountain-scene').service('random', function() {
    var seed;
    seed = 1;
    return {
      reset: function(randomSeed) {
        if (randomSeed == null) {
          randomSeed = 1;
        }
        return seed = randomSeed;
      },
      next: function() {
        var x;
        x = Math.sin(seed++) * 10000;
        return x - Math.floor(x);
      }
    };
  });

  angular.module('mountain-scene').factory('Mountain', function(random) {
    var Mountain, buildTree, flattenTree, lowest, normalize;
    buildTree = function(roughness) {
      var build;
      return build = function(segment, depth, displacement) {
        var avgY, change, left, right, y;
        avgY = (segment.l + segment.r) / 2;
        change = (random.next() * 2 - 1) * displacement;
        y = avgY + change;
        displacement = displacement * roughness;
        left = {
          l: segment.l,
          r: y
        };
        right = {
          l: y,
          r: segment.r
        };
        segment.children = [left, right];
        if (depth > 1) {
          build(left, depth - 1, displacement);
          build(right, depth - 1, displacement);
        }
        return segment;
      };
    };
    flattenTree = function(segment, heights) {
      if (heights == null) {
        heights = [];
      }
      if (segment.children != null) {
        flattenTree(segment.children[0], heights);
        flattenTree(segment.children[1], heights);
      }
      if (segment.children == null) {
        heights.push(segment.l);
      }
      return heights;
    };
    lowest = function(heights) {
      return heights.reduce(function(l, h) {
        if (h < l) {
          l = h;
        }
        return l;
      }, 0);
    };
    normalize = function(heights) {
      var l;
      l = lowest(heights);
      return heights.map(function(h) {
        return h - l + 1;
      });
    };
    return Mountain = (function() {
      function Mountain(_arg) {
        var color, geometry, h, heights, initialDisplacement, leftHeight, material, rightHeight, roughness, segment, shape, tree, x, zPos, _i, _len, _ref, _ref1;
        _ref = _arg != null ? _arg : params, roughness = _ref.roughness, initialDisplacement = _ref.initialDisplacement, leftHeight = _ref.leftHeight, rightHeight = _ref.rightHeight, zPos = _ref.zPos, color = _ref.color;
        segment = {
          l: leftHeight || 1,
          r: rightHeight || 1
        };
        if (color == null) {
          color = 0xBBBBBB;
        }
        tree = buildTree(roughness)(segment, 10, initialDisplacement);
        heights = flattenTree(tree);
        shape = new THREE.Shape();
        heights = normalize(heights);
        x = -(heights.length / 2);
        shape.moveTo(x, 0);
        shape.lineTo(x, heights[0]);
        _ref1 = heights.slice(1);
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          h = _ref1[_i];
          x += 1;
          shape.lineTo(x, h);
        }
        shape.lineTo(x, 0);
        shape.lineTo(-(heights.length / 2), 0);
        geometry = new THREE.ShapeGeometry(shape);
        material = new THREE.MeshBasicMaterial({
          color: color
        });
        this.object = new THREE.Mesh(geometry, material);
        this.object.position.z = zPos || 0;
      }

      return Mountain;

    })();
  });

  angular.module('mountain-scene').factory('MountainScene', function(Mountain, random) {
    var MountainScene;
    return MountainScene = (function() {
      function MountainScene() {
        var mountain, _i, _len, _ref;
        this._seed = 1;
        this._scene = new THREE.Scene();
        this._camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.renderer = new THREE.WebGLRenderer();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this._camera.position.z = 250;
        this._roughness = 0.65;
        this._initialDisplacement = 65;
        this._leftHeight = 2;
        this._rightHeight = 2;
        this._makeMountains();
        _ref = this._mountains;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mountain = _ref[_i];
          this._scene.add(mountain.object);
        }
      }

      MountainScene.prototype.regenerate = function() {
        this._seed = Math.random() * 100000;
        return this._update();
      };

      MountainScene.prototype.render = function() {
        this.renderer.render(this._scene, this._camera);
        return requestAnimationFrame((function(_this) {
          return function() {
            return _this.render();
          };
        })(this));
      };

      MountainScene.prototype._makeMountains = function() {
        var color, n, zPos, _i, _results;
        this._mountains = [];
        zPos = 0;
        color = 0x444444;
        _results = [];
        for (n = _i = 0; _i < 4; n = ++_i) {
          this._mountains.push(new Mountain({
            roughness: this.roughness,
            initialDisplacement: this.initialDisplacement,
            leftHeight: this.leftHeight,
            rightHeight: this.rightHeight,
            zPos: zPos,
            color: color
          }));
          zPos += 20;
          _results.push(color *= 0.08);
        }
        return _results;
      };

      MountainScene.prototype._update = function() {
        var mountain, _i, _j, _len, _len1, _ref, _ref1, _results;
        _ref = this._mountains;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mountain = _ref[_i];
          this._scene.remove(mountain.object);
        }
        random.reset(this._seed);
        this._makeMountains();
        _ref1 = this._mountains;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          mountain = _ref1[_j];
          _results.push(this._scene.add(mountain.object));
        }
        return _results;
      };

      Object.defineProperties(MountainScene.prototype, {
        roughness: {
          get: function() {
            return this._roughness;
          },
          set: function(value) {
            this._roughness = parseFloat(value);
            return this._update();
          }
        },
        initialDisplacement: {
          get: function() {
            return this._initialDisplacement;
          },
          set: function(value) {
            this._initialDisplacement = parseFloat(value);
            return this._update();
          }
        },
        leftHeight: {
          get: function() {
            return this._leftHeight;
          },
          set: function(value) {
            this._leftHeight = parseFloat(value);
            return this._update();
          }
        },
        rightHeight: {
          get: function() {
            return this._rightHeight;
          },
          set: function(value) {
            this._rightHeight = parseFloat(value);
            return this._update();
          }
        },
        cameraX: {
          get: function() {
            return this._camera.position.x;
          },
          set: function(value) {
            return this._camera.position.x = parseFloat(value);
          }
        },
        cameraY: {
          get: function() {
            return this._camera.position.y;
          },
          set: function(value) {
            return this._camera.position.y = parseFloat(value);
          }
        },
        cameraZ: {
          get: function() {
            return this._camera.position.z;
          },
          set: function(value) {
            return this._camera.position.z = parseFloat(value);
          }
        }
      });

      return MountainScene;

    })();
  });

}).call(this);
