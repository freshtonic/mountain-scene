// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('mountain-scene', []);

  angular.module('mountain-scene').run(function($rootScope, MountainScene) {
    $rootScope.scene = new MountainScene();
    return $(function() {
      document.body.appendChild($rootScope.scene.renderer.domElement);
      return $rootScope.scene.render();
    });
  });

  angular.module('mountain-scene').service('random', function() {
    var seed;
    seed = 1;
    return {
      reset: function(randomSeed) {
        if (randomSeed == null) {
          randomSeed = 1;
        }
        return seed = randomSeed;
      },
      next: function() {
        var x;
        x = Math.sin(seed++) * 10000;
        return x - Math.floor(x);
      }
    };
  });

  angular.module('mountain-scene').factory('Mountain', function(random) {
    var Mountain, buildTree, flattenTree;
    buildTree = function(roughness) {
      var build;
      return build = function(segment, depth, displacement) {
        var avgY, change, left, right, y;
        avgY = (segment.l + segment.r) / 2;
        change = (random.next() * 2 - 1) * displacement;
        y = avgY + change;
        displacement = displacement * roughness;
        left = {
          l: segment.l,
          r: y
        };
        right = {
          l: y,
          r: segment.r
        };
        segment.children = [left, right];
        if (depth > 1) {
          build(left, depth - 1, displacement);
          build(right, depth - 1, displacement);
        }
        return segment;
      };
    };
    flattenTree = function(segment, heights) {
      if (heights == null) {
        heights = [];
      }
      if (segment.children != null) {
        flattenTree(segment.children[0], heights);
        flattenTree(segment.children[1], heights);
      }
      if (segment.children == null) {
        heights.push(segment.l);
      }
      return heights;
    };
    return Mountain = (function() {
      function Mountain(roughness, initialDisplacement) {
        var geometry, h, heights, material, segment, shape, tree, x, _i, _len, _ref;
        segment = {
          l: 1,
          r: 1
        };
        tree = buildTree(roughness)(segment, 11, initialDisplacement);
        heights = flattenTree(tree);
        shape = new THREE.Shape();
        x = -512;
        shape.moveTo(x, heights[0]);
        _ref = heights.slice(1);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          h = _ref[_i];
          x += 1;
          shape.lineTo(x, h);
        }
        shape.lineTo(x, -20);
        shape.lineTo(-512, -20);
        shape.lineTo(512, heights[0]);
        geometry = new THREE.ShapeGeometry(shape);
        material = new THREE.MeshBasicMaterial({
          color: 0x00ffff
        });
        this.object = new THREE.Mesh(geometry, material);
        this.object.position.x = -30;
      }

      return Mountain;

    })();
  });

  angular.module('mountain-scene').factory('MountainScene', function(Mountain, random) {
    var MountainScene;
    return MountainScene = (function() {
      function MountainScene() {
        this._scene = new THREE.Scene();
        this._camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.renderer = new THREE.WebGLRenderer();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this._camera.position.z = 10;
        this._roughness = 0.8;
        this._initialDisplacement = 50;
        this._mountain = new Mountain(this._roughness, this._initialDisplacement);
        this._scene.add(this._mountain.object);
      }

      MountainScene.prototype.regenerate = function() {
        return this._update(Math.random() * 100000);
      };

      MountainScene.prototype.render = function() {
        this.renderer.render(this._scene, this._camera);
        return requestAnimationFrame((function(_this) {
          return function() {
            return _this.render();
          };
        })(this));
      };

      MountainScene.prototype._update = function(seed) {
        this._scene.remove(this._mountain.object);
        random.reset(seed);
        this._mountain = new Mountain(this._roughness, this._initialDisplacement);
        return this._scene.add(this._mountain.object);
      };

      Object.defineProperties(MountainScene.prototype, {
        roughness: {
          get: function() {
            return this._roughness;
          },
          set: function(value) {
            this._roughness = value;
            return this._update();
          }
        },
        initialDisplacement: {
          get: function() {
            return this._initialDisplacement;
          },
          set: function(value) {
            this._initialDisplacement = value;
            return this._update();
          }
        },
        cameraZ: {
          get: function() {
            return this._camera.position.z;
          },
          set: function(value) {
            this._camera.position.z = value;
            return this._update();
          }
        }
      });

      return MountainScene;

    })();
  });

}).call(this);
